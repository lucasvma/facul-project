{"version":3,"file":"static/webpack/static/development/pages/classes/[slug].js.83def3475c5dd4da24ce.hot-update.js","sources":["webpack:///./src/pages/classes/[slug].js"],"sourcesContent":["import fs from 'fs'\nimport matter from 'gray-matter'\nimport hydrate from 'next-mdx-remote/hydrate'\nimport renderToString from 'next-mdx-remote/render-to-string'\nimport dynamic from 'next/dynamic'\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport path from 'path'\nimport CustomLink from '../../components/CustomLink'\nimport Layout from '../../components/Layout'\nimport { classFilePaths, CLASSES_PATH } from '../../utils/mdxUtils'\n\nconst components = {\n    a: CustomLink,\n    TestComponent: dynamic(() => import('../../components/TestComponent')),\n    Head,\n}\n\nexport default function ClassPage({ source, frontMatter }) {\n    const content = hydrate(source, { components })\n    return (\n        <Layout>\n            <header>\n                <nav>\n                    <Link href=\"/\">\n                        <a>ðŸ‘ˆ Go back home</a>\n                    </Link>\n                </nav>\n            </header>\n            <div className=\"class-header\">\n                <h1>{frontMatter.title}</h1>\n                {frontMatter.description && (\n                    <p className=\"description\">{frontMatter.description}</p>\n                )}\n            </div>\n            <main>{content}</main>\n\n            <style jsx>{`\n        .class-header h1 {\n          margin-bottom: 0;\n        }\n        .class-header {\n          margin-bottom: 2rem;\n        }\n        .description {\n          opacity: 0.6;\n        }\n      `}</style>\n        </Layout>\n    )\n}\n\nexport const getStaticProps = async ({ params }) => {\n    const classFilePath = path.join(CLASSES_PATH, `${params.slug}.mdx`)\n    const source = fs.readFileSync(classFilePath)\n\n    const { content, data } = matter(source)\n\n    const mdxSource = await renderToString(content, {\n        components,\n        // Optionally pass remark/rehype plugins\n        mdxOptions: {\n            remarkPlugins: [],\n            rehypePlugins: [],\n        },\n        scope: data,\n    })\n\n    return {\n        props: {\n            source: mdxSource,\n            frontMatter: data,\n        },\n    }\n}\n\nexport const getStaticPaths = async () => {\n    const paths = classFilePaths\n        // Remove file extensions for page paths\n        .map((path) => path.replace(/\\.mdx?$/, ''))\n        // Map the path into the static paths object required by Next.js\n        .map((slug) => ({ params: { slug } }))\n\n    return {\n        paths,\n        fallback: false,\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AA6BA;;;;A","sourceRoot":""}